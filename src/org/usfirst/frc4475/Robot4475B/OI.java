// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4475.Robot4475B;
import org.usfirst.frc4475.Robot4475B.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driveGamePad;
    public JoystickButton joystickButton1TossFullPower;
    public JoystickButton joystickButton2TossBallResetPostion;
    public JoystickButton joystickButton3TossBallHalfPower;
    public JoystickButton joystickButton4Toss3QPower;
    public JoystickButton joystickButton5LowerFeeder;
    public JoystickButton joystickButton6RaiseBallFeeder;
    public Joystick armGamePad;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armGamePad = new Joystick(2);
        
        joystickButton6RaiseBallFeeder = new JoystickButton(armGamePad, 6);
        joystickButton6RaiseBallFeeder.whenPressed(new RaiseBallFeeder());
        joystickButton5LowerFeeder = new JoystickButton(armGamePad, 5);
        joystickButton5LowerFeeder.whenPressed(new LowerBallFeeder());
        joystickButton4Toss3QPower = new JoystickButton(armGamePad, 4);
        joystickButton4Toss3QPower.whenPressed(new Toss3QandReturn());
        joystickButton3TossBallHalfPower = new JoystickButton(armGamePad, 3);
        joystickButton3TossBallHalfPower.whenPressed(new TossHalfPowerAndReturn());
        joystickButton2TossBallResetPostion = new JoystickButton(armGamePad, 2);
        joystickButton2TossBallResetPostion.whenPressed(new TossCheckPassAndReturn());
        joystickButton1TossFullPower = new JoystickButton(armGamePad, 1);
        joystickButton1TossFullPower.whenPressed(new TossFullPowerAndReturn());
        driveGamePad = new Joystick(1);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());
        SmartDashboard.putData("TossBall Full Power", new TossBallFullPower());
        SmartDashboard.putData("TossBall Reset Position", new TossBallResetPosition());
        SmartDashboard.putData("TossBall Half Power", new TossBallHalfPower());
        SmartDashboard.putData("TossBall 3Q Power", new TossBall3QPower());
        SmartDashboard.putData("LowerBallFeeder", new LowerBallFeeder());
        SmartDashboard.putData("RaiseBallFeeder", new RaiseBallFeeder());
        SmartDashboard.putData("TossBall LongToss", new TossBallLongToss());
        SmartDashboard.putData("DriveForward", new DriveForward());
        SmartDashboard.putData("TurnLeft", new TurnLeft());
        SmartDashboard.putData("TurnRight", new TurnRight());
        SmartDashboard.putData("CheckTargetDriveandShoot", new CheckTargetDriveandShoot());
        SmartDashboard.putData("DriveToLeftGoal", new DriveToLeftGoal());
        SmartDashboard.putData("DriveToRightGoal", new DriveToRightGoal());
        SmartDashboard.putData("DriveToDistance", new DriveToDistance(1000));
        SmartDashboard.putData("TossBallSlowReset", new TossBallSlowReset());
        SmartDashboard.putData("LowerArmsPrepareShot", new LowerArmsPrepareShot());
        SmartDashboard.putData("ShortDelay", new ShortDelay());
        SmartDashboard.putData("DriveTurn", new DriveTurn(.5,.5));
        SmartDashboard.putData("DriveToLeftAndPrepareShot", new DriveToLeftAndPrepareShot());
        SmartDashboard.putData("DriveToRightAndPrepareShot", new DriveToRightAndPrepareShot());
        SmartDashboard.putData("Toss3QandReturn", new Toss3QandReturn());
        SmartDashboard.putData("TossFullPowerAndReturn", new TossFullPowerAndReturn());
        SmartDashboard.putData("TossHalfPowerAndReturn", new TossHalfPowerAndReturn());
        SmartDashboard.putData("TossCheckPass", new TossCheckPass());
        SmartDashboard.putData("TossCheckPassAndReturn", new TossCheckPassAndReturn());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveGamePad() {
        return driveGamePad;
    }
    public Joystick getArmGamePad() {
        return armGamePad;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
