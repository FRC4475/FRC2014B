// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4475.Robot4475B.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4475.Robot4475B.Robot;
/**
 *
 */
public class  DriveTurn extends Command {
    double speed;
    double time;
    public DriveTurn(double speed,double time) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.mainDrive);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.speed = speed;
        this.time = time;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        if (SmartDashboard.getNumber("BLOB_COUNT")<2)
        {    setTimeout(time);
            Robot.mainDrive.driveRotate(speed);
        }else
        {
            setTimeout(.0001);
            Robot.mainDrive.driveRotate(0);
        }    
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.mainDrive.driveRotate(speed);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.mainDrive.driveRotate(0);    
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
     }
}
